# -*- coding: utf-8 -*-
#   Copyright (c) 2019 D. de Vries
#
#   This file is part of XFoil.
#
#   XFoil is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   XFoil is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with XFoil.  If not, see <https://www.gnu.org/licenses/>.
import numpy as np
import unittest

from .xfoil import XFoil
from .model import Airfoil

naca0012 = Airfoil(
    x=np.array([+1.0000e+00, +9.9168e-01, +9.8037e-01, +9.6727e-01, +9.5272e-01, +9.3720e-01, +9.2112e-01, +9.0474e-01,
                +8.8821e-01, +8.7160e-01, +8.5494e-01, +8.3827e-01, +8.2158e-01, +8.0488e-01, +7.8817e-01, +7.7146e-01,
                +7.5475e-01, +7.3803e-01, +7.2132e-01, +7.0460e-01, +6.8789e-01, +6.7118e-01, +6.5447e-01, +6.3777e-01,
                +6.2108e-01, +6.0440e-01, +5.8772e-01, +5.7106e-01, +5.5441e-01, +5.3778e-01, +5.2116e-01, +5.0456e-01,
                +4.8798e-01, +4.7143e-01, +4.5489e-01, +4.3839e-01, +4.2191e-01, +4.0546e-01, +3.8905e-01, +3.7268e-01,
                +3.5635e-01, +3.4007e-01, +3.2383e-01, +3.0766e-01, +2.9154e-01, +2.7550e-01, +2.5953e-01, +2.4366e-01,
                +2.2788e-01, +2.1222e-01, +1.9670e-01, +1.8135e-01, +1.6619e-01, +1.5127e-01, +1.3666e-01, +1.2246e-01,
                +1.0877e-01, +9.5752e-02, +8.3582e-02, +7.2423e-02, +6.2395e-02, +5.3537e-02, +4.5806e-02, +3.9101e-02,
                +3.3294e-02, +2.8256e-02, +2.3867e-02, +2.0028e-02, +1.6658e-02, +1.3692e-02, +1.1080e-02, +8.7858e-03,
                +6.7811e-03, +5.0484e-03, +3.5772e-03, +2.3627e-03, +1.4037e-03, +6.9909e-04, +2.4355e-04, +2.6000e-05,
                +2.6000e-05, +2.4355e-04, +6.9909e-04, +1.4037e-03, +2.3627e-03, +3.5772e-03, +5.0484e-03, +6.7811e-03,
                +8.7858e-03, +1.1080e-02, +1.3692e-02, +1.6658e-02, +2.0028e-02, +2.3867e-02, +2.8256e-02, +3.3294e-02,
                +3.9101e-02, +4.5806e-02, +5.3537e-02, +6.2395e-02, +7.2423e-02, +8.3582e-02, +9.5752e-02, +1.0877e-01,
                +1.2246e-01, +1.3666e-01, +1.5127e-01, +1.6619e-01, +1.8135e-01, +1.9670e-01, +2.1222e-01, +2.2788e-01,
                +2.4366e-01, +2.5953e-01, +2.7550e-01, +2.9154e-01, +3.0766e-01, +3.2383e-01, +3.4007e-01, +3.5635e-01,
                +3.7268e-01, +3.8905e-01, +4.0546e-01, +4.2191e-01, +4.3839e-01, +4.5489e-01, +4.7143e-01, +4.8798e-01,
                +5.0456e-01, +5.2116e-01, +5.3778e-01, +5.5441e-01, +5.7106e-01, +5.8772e-01, +6.0440e-01, +6.2108e-01,
                +6.3777e-01, +6.5447e-01, +6.7118e-01, +6.8789e-01, +7.0460e-01, +7.2132e-01, +7.3803e-01, +7.5475e-01,
                +7.7146e-01, +7.8817e-01, +8.0488e-01, +8.2158e-01, +8.3827e-01, +8.5494e-01, +8.7160e-01, +8.8821e-01,
                +9.0474e-01, +9.2112e-01, +9.3720e-01, +9.5272e-01, +9.6727e-01, +9.8037e-01, +9.9168e-01, +1.0000e+00]
               ),
    y=np.array([+1.2600e-03, +2.4215e-03, +3.9814e-03, +5.7619e-03, +7.7062e-03, +9.7433e-03, +1.1815e-02, +1.3886e-02,
                +1.5936e-02, +1.7956e-02, +1.9943e-02, +2.1894e-02, +2.3810e-02, +2.5689e-02, +2.7532e-02, +2.9338e-02,
                +3.1107e-02, +3.2839e-02, +3.4534e-02, +3.6190e-02, +3.7807e-02, +3.9384e-02, +4.0921e-02, +4.2415e-02,
                +4.3865e-02, +4.5271e-02, +4.6630e-02, +4.7940e-02, +4.9199e-02, +5.0406e-02, +5.1557e-02, +5.2650e-02,
                +5.3683e-02, +5.4652e-02, +5.5554e-02, +5.6385e-02, +5.7143e-02, +5.7822e-02, +5.8419e-02, +5.8930e-02,
                +5.9349e-02, +5.9671e-02, +5.9891e-02, +6.0004e-02, +6.0002e-02, +5.9879e-02, +5.9628e-02, +5.9241e-02,
                +5.8710e-02, +5.8027e-02, +5.7181e-02, +5.6164e-02, +5.4967e-02, +5.3580e-02, +5.1997e-02, +5.0216e-02,
                +4.8243e-02, +4.6095e-02, +4.3805e-02, +4.1422e-02, +3.9000e-02, +3.6592e-02, +3.4237e-02, +3.1957e-02,
                +2.9760e-02, +2.7644e-02, +2.5598e-02, +2.3613e-02, +2.1675e-02, +1.9770e-02, +1.7888e-02, +1.6017e-02,
                +1.4147e-02, +1.2270e-02, +1.0381e-02, +8.4792e-03, +6.5676e-03, +4.6570e-03, +2.7615e-03, +9.0564e-04,
                -9.0564e-04, -2.7615e-03, -4.6570e-03, -6.5676e-03, -8.4792e-03, -1.0381e-02, -1.2270e-02, -1.4147e-02,
                -1.6017e-02, -1.7888e-02, -1.9770e-02, -2.1675e-02, -2.3613e-02, -2.5598e-02, -2.7644e-02, -2.9760e-02,
                -3.1957e-02, -3.4237e-02, -3.6592e-02, -3.9000e-02, -4.1422e-02, -4.3805e-02, -4.6095e-02, -4.8243e-02,
                -5.0216e-02, -5.1997e-02, -5.3580e-02, -5.4967e-02, -5.6164e-02, -5.7181e-02, -5.8027e-02, -5.8710e-02,
                -5.9241e-02, -5.9628e-02, -5.9879e-02, -6.0002e-02, -6.0004e-02, -5.9891e-02, -5.9671e-02, -5.9349e-02,
                -5.8930e-02, -5.8419e-02, -5.7822e-02, -5.7143e-02, -5.6385e-02, -5.5554e-02, -5.4652e-02, -5.3683e-02,
                -5.2650e-02, -5.1557e-02, -5.0406e-02, -4.9199e-02, -4.7940e-02, -4.6630e-02, -4.5271e-02, -4.3865e-02,
                -4.2415e-02, -4.0921e-02, -3.9384e-02, -3.7807e-02, -3.6190e-02, -3.4534e-02, -3.2839e-02, -3.1107e-02,
                -2.9338e-02, -2.7532e-02, -2.5689e-02, -2.3810e-02, -2.1894e-02, -1.9943e-02, -1.7956e-02, -1.5936e-02,
                -1.3886e-02, -1.1815e-02, -9.7433e-03, -7.7062e-03, -5.7619e-03, -3.9814e-03, -2.4215e-03, -1.2600e-03]
               )
)


class TestXFoil(unittest.TestCase):
    """Test whether the XFOIL module functions properly."""

    def assertNumpyArraysAlmostEqual(self, first, second, decimal, msg=''):
        for i in range(first.size):
            self.assertAlmostEqual(first[i], second[i], decimal, msg)

    def test_a(self):
        """Analyse the NACA 0012 at Re = 1e6, M = 0, α = 10 degrees and verify the results."""
        xf = XFoil()
        xf.airfoil = naca0012
        xf.Re = 1e6
        xf.max_iter = 100
        cl, cd, cm, cp = xf.a(10)

        self.assertAlmostEqual(cl, 1.0809, 4)
        self.assertAlmostEqual(cd, 0.0150, 4)
        self.assertAlmostEqual(cm, 0.0053, 4)
        self.assertAlmostEqual(cp, -5.5766, 4)

    def test_cl(self):
        """Analyse the NACA 0012 at Re = 1e6, M = 0, C_l = 1 and verify the results."""
        xf = XFoil()
        xf.airfoil = naca0012
        xf.Re = 1e6
        xf.max_iter = 40
        a, cd, cm, cp = xf.cl(1)

        self.assertAlmostEqual(a, 9.0617, 4)
        self.assertAlmostEqual(cd, 0.0135, 4)
        self.assertAlmostEqual(cm, 0.0013, 4)
        self.assertAlmostEqual(cp, -4.7361, 4)        

    def test_aseq(self):
        """Analyse the NACA 0012 at Re = 1e6, M = 0, α = -20, -19.5, ..., 19.5 and verify the results."""
        xf = XFoil()
        xf.airfoil = naca0012
        xf.Re = 1e6
        xf.max_iter = 150
        a, cl, cd, cm, cp = xf.aseq(-20, 20, 0.5)

        self.assertNumpyArraysAlmostEqual(a, np.arange(-20, 20, 0.5), 4)
        self.assertNumpyArraysAlmostEqual(cl, np.array([
            -1.1177, -1.1521, -1.1878, -1.2263, -1.2654, -1.3014, -1.3296, -1.3656, -1.3861, -1.3883,
            -1.3793, -1.3661, -1.3492, -1.3264, -1.3155, -1.2830, -1.2451, -1.2065, -1.1664, -1.1223,
            -1.0809, -1.0363, -0.9948, -0.9512, -0.9100, -0.8685, -0.8266, -0.7637, -0.6948, -0.6255,
            -0.5580, -0.4878, -0.4278, -0.3723, -0.3199, -0.2672, -0.2142, -0.1609, -0.1073, -0.0537,
            -0.0000, +0.0537, +0.1073, +0.1609, +0.2142, +0.2672, +0.3199, +0.3723, +0.4278, +0.4878,
            +0.5580, +0.6255, +0.6949, +0.7638, +0.8264, +0.8684, +0.9099, +0.9511, +0.9948, +1.0363,
            +1.0809, +1.1224, +1.1665, +1.2067, +1.2454, +1.2834, +1.3161, +1.3273, +1.3502, +1.3673,
            +1.3808, +1.3900, +1.3877, +1.3670, +1.3323, +1.3041, +1.2680, +1.2288, +1.1901, +1.1541]), 4)
        self.assertNumpyArraysAlmostEqual(cd, np.array([
            +0.1474, +0.1320, +0.1171, +0.1023, +0.0879, +0.0746, +0.0630, +0.0509, +0.0417, +0.0358,
            +0.0317, +0.0286, +0.0261, +0.0243, +0.0219, +0.0205, +0.0194, +0.0181, +0.0169, +0.0161,
            +0.0150, +0.0143, +0.0134, +0.0128, +0.0121, +0.0115, +0.0109, +0.0104, +0.0097, +0.0091,
            +0.0085, +0.0078, +0.0073, +0.0068, +0.0064, +0.0061, +0.0058, +0.0056, +0.0055, +0.0054,
            +0.0054, +0.0054, +0.0055, +0.0056, +0.0058, +0.0061, +0.0064, +0.0068, +0.0073, +0.0078,
            +0.0085, +0.0091, +0.0097, +0.0104, +0.0109, +0.0115, +0.0121, +0.0128, +0.0134, +0.0143,
            +0.0150, +0.0161, +0.0169, +0.0181, +0.0194, +0.0205, +0.0220, +0.0243, +0.0261, +0.0286,
            +0.0317, +0.0357, +0.0417, +0.0509, +0.0628, +0.0745, +0.0879, +0.1023, +0.1171, +0.1321]), 4)
        self.assertNumpyArraysAlmostEqual(cm, np.array([
            +0.0238, +0.0148, +0.0066, -0.0012, -0.0085, -0.0153, -0.0210, -0.0268, -0.0304, -0.0317,
            -0.0312, -0.0295, -0.0269, -0.0237, -0.0184, -0.0156, -0.0134, -0.0112, -0.0091, -0.0074,
            -0.0053, -0.0034, -0.0010, +0.0013, +0.0040, +0.0067, +0.0093, +0.0074, +0.0043, +0.0011,
            -0.0017, -0.0051, -0.0060, -0.0058, -0.0049, -0.0039, -0.0030, -0.0022, -0.0014, -0.0007,
            +0.0000, +0.0007, +0.0014, +0.0022, +0.0030, +0.0039, +0.0049, +0.0058, +0.0060, +0.0051,
            +0.0017, -0.0011, -0.0043, -0.0074, -0.0092, -0.0066, -0.0039, -0.0013, +0.0010, +0.0034,
            +0.0053, +0.0074, +0.0091, +0.0111, +0.0133, +0.0155, +0.0182, +0.0236, +0.0267, +0.0294,
            +0.0310, +0.0315, +0.0302, +0.0264, +0.0208, +0.0149, +0.0082, +0.0008, -0.0070, -0.0152]), 4)
        self.assertNumpyArraysAlmostEqual(cp, np.array([
            -8.7529, -9.1022, -9.4043, -9.6795, -9.9144,-10.0823,-10.1471,-10.2631,-10.2124, -9.9857,
            -9.6607, -9.3056, -8.9297, -8.5174, -8.1933, -7.7313, -7.252 , -6.8146, -6.3743, -5.9255,
            -5.5074, -5.0771, -4.6898, -4.3144, -3.9609, -3.6169, -3.2973, -2.9287, -2.5654, -2.2316,
            -1.9300, -1.6496, -1.4162, -1.2171, -1.0441, -0.8914, -0.7602, -0.6490, -0.5560, -0.4790,
            -0.4139, -0.4790, -0.5560, -0.6490, -0.7602, -0.8914, -1.0441, -1.2172, -1.4162, -1.6497,
            -1.9301, -2.2316, -2.5655, -2.9289, -3.2968, -3.6164, -3.9604, -4.3141, -4.6896, -5.0771,
            -5.5077, -5.9260, -6.3751, -6.8156, -7.2537, -7.7335, -8.1964, -8.5225, -8.9357, -9.3128,
            -9.6696, -9.9962,-10.2224,-10.2701,-10.1655,-10.1009, -9.9321, -9.6953, -9.4179, -9.1134]), 4)        

    def test_cseq(self):
        """Analyse the NACA 0012 at Re = 1e6, M = 0, C_l = -0.5, -0.45, ..., 0.45 and verify the results."""
        xf = XFoil()
        xf.airfoil = naca0012
        xf.Re = 1e6
        xf.max_iter = 100
        a, cl, cd, cm, cp = xf.cseq(-0.5, 0.5, 0.05)

        self.assertNumpyArraysAlmostEqual(cl, np.arange(-0.5, 0.5, 0.05), 4)
        self.assertNumpyArraysAlmostEqual(a, np.array([
            -4.5879, -4.1765, -3.7446, -3.2848, -2.8112, -2.3371, -1.8666, -1.3981, -0.9324, -0.4659,
            -0.0000, +0.4659, +0.9323, +1.3981, +1.8665, +2.3370, +2.8111, +3.2847, +3.7445, +4.1764]), 4)
        self.assertNumpyArraysAlmostEqual(cd, np.array([
            +0.0079, +0.0075, +0.0070, +0.0066, +0.0063, +0.0060, +0.0058, +0.0056, +0.0055, +0.0054,
            +0.0054, +0.0054, +0.0055, +0.0056, +0.0058, +0.0060, +0.0063, +0.0066, +0.0070, +0.0075]), 4)
        self.assertNumpyArraysAlmostEqual(cm, np.array([
            -0.0045, -0.0055, -0.0058, -0.0054, -0.0045, -0.0036, -0.0028, -0.0020, -0.0013, -0.0007,
            -0.0000, +0.0007, +0.0013, +0.0020, +0.0028, +0.0036,  0.0045, +0.0054, +0.0058, +0.0055]), 4)
        self.assertNumpyArraysAlmostEqual(cp, np.array([
            -1.6956, -1.4979, -1.3122, -1.1402, -0.9828, -0.8469, -0.7287, -0.6286, -0.5449, -0.4743,
            -0.4139, -0.4743, -0.5449, -0.6286, -0.7287, -0.8469, -0.9828, -1.1402, -1.3122, -1.4979]), 4)


if __name__ == '__main__':
    unittest.main()
